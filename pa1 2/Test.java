import edu.princeton.cs.algs4.StdOut;

import java.util.concurrent.Callable;
import java.util.List;
import java.util.Queue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.TreeSet;


class Test {

    // This is the exception thrown when there's a problem.
    static class TestException extends Exception  {
        static final long serialVersionUID = 314;
        public TestException (String msg) {
          super (msg);
        }
    }

    // This checks contains() and min() by going through testSuite1, in which
    // the 4 element from the end of each array is a tree obtained by inserting
    // all the elements that start with a +.  We can then check on this tree
    // that contains() work, and compute the min from these values.
    static private Void testEx11 () throws TestException {
      for (int i = 0; i < testSuite1.length; ++i) {
        int min = Integer.MAX_VALUE;
        TwoThreeTree<Integer> tree =
          TwoThreeTree.fromString (testSuite1[i][testSuite1[i].length - 4]);
       
        TreeSet<Integer> set = new TreeSet<Integer> ();
        for (int j = 0; j < testSuite1[i].length - 4; ++j) {
          int n = Integer.parseInt (testSuite1[i][j]);
          if (n >= 0) {
            set.add (n);
            min = Math.min (min, n);
            if (!tree.contains (n))
              throw new TestException ("contains() failed.");
          }
        }
        if (min != tree.min ())
          throw new TestException ("min() failed.");
        for (int j = 0; j < 100; ++j) {
          int n = (int) (Math.random() * 100);
          if (!set.contains (n) && tree.contains (n))
            throw new TestException ("!contains() failed.");
        }
      }
      return null;     
    }

    // This checks put() and delete() (the latter only if delete is true).
    static private Void testEx1213 (boolean delete) throws TestException {
      TwoThreeTree<Integer> tree = new TwoThreeTree<Integer>();
      int dtree = (delete ? 0 : 2);

      for (int i = 0; i < testSuite1.length; ++i) {
        tree = new TwoThreeTree<Integer> ();

        // Insert/delete elements as dictated by test.
        for (int j = 0; j < testSuite1[i].length - 4; ++j) {
          int n = Integer.parseInt (testSuite1[i][j]);
          if (n >= 0) {
            tree.put (n);
            if (!tree.contains (n))
              throw new TestException ("contains() failed on insert(" + n + ") in tree " + i);
          } else {
            if (delete) {
              tree.delete (-n);
              if (tree.contains (-n))
                throw new TestException ("contains() failed on delete(" + -n + ") in tree " + i);
            }
          }
        }

        // Check that the tree obtained is correct.
        if (! (!tree.contains (-10) &&
               !tree.contains (1 << 30) &&
               tree.size() == Integer.parseInt (testSuite1[i][testSuite1[i].length - 1 - dtree]) &&
               testSuite1[i][testSuite1[i].length - 2 - dtree].equals (tree.toString ())))
          throw new TestException ("tree creation " + i + " failed.\n" +
                                   "  expected: " + testSuite1[i][testSuite1[i].length - 2 - dtree] + "\n" +
                                   "  produced: " + tree);
      }
      return null;
    }

    // Random stress tests of Ex 1
    private static Void testEx1Rand () throws TestException {
      TwoThreeTree<Integer> tree = new TwoThreeTree<Integer>();

      for (int j = 0; j < 300; ++j) {
        tree = new TwoThreeTree<Integer> ();
        for (int i = 0; i < 200; ++i) {
          if (!tree.is23 ())
            throw new TestException ("tree is not 2-3: " + tree);
          int n = (int) (Math.random() * 30);
          if (Math.random() > 0.5) {
            tree.put (n);
            if (!tree.contains (n))
              throw new TestException ("tree does not contain newly added " + n + ": " + tree);
          } else {
            tree.delete (n);
            if (tree.contains (n))
              throw new TestException ("tree contains freshly deleted " + n + ": " + tree);
          }
        }
      }
      return null;
    }

    // Random stress tests of Ex 2
    static private Void testEx2 () throws TestException {
      for (int j = 0; j < 100; ++j) {
        ArrayList<Integer> list = new ArrayList<Integer> ();
        int m = 0,
          n = (int) (Math.random() * 300) + 1;
        while (n-- > 0) {
          int el = (int) (Math.random() * 300);
          if (!list.contains (el)) {
            list.add (el);
            m++;
          }
        }
        List<Integer> insertList = ProgrammingAssignment1.bestInsertOrder (list);
        TwoThreeTree<Integer> tree = new TwoThreeTree<Integer> ();
        if (insertList != null)
          for (int el : insertList)
            tree.put (el);
        if (tree.height () != Math.ceil (Math.log (m + 1) / Math.log (3)) ||
            tree.size () != m)
          throw new TestException ("tree does not have minimal height (" + tree + ") of " + m + " elts\n" +
                                   "  expected " + (int) Math.ceil (Math.log (m + 1) / Math.log (3)) + "\n" +
                                   "  produced " + tree.height ());
      }
      return null;
    }

    // This checks that the preorder traversal of tree is "preorder"
    static private void checkBSTPreorder (ArrayList<Integer> preorder,
                                          NakedTree<Integer> tree, int low, int high) throws TestException {
      if (tree == null)
        return;
      if (preorder.size () == 0)
        throw new TestException ("too many nodes in the tree.");
      if (tree.getNKeys () != 1 || tree.getKey (0) < low || tree.getKey (0) > high)
        throw new TestException ("not a BST: Key is " + tree.getKey (0) + " but low = " + low + " and high = " + high);
      if (preorder.get (0) != tree.getKey (0))
        throw new TestException ("preorder failed.");
      preorder.remove(0);
      checkBSTPreorder (preorder, tree.getChild (0), low, tree.getKey (0));
      checkBSTPreorder (preorder, tree.getChild (1), tree.getKey (0), high);
    }

    // This runs testSuite3 and checks that preorderToBST gives the correct BST.
    static private Void testEx3 () throws TestException {
      for (int j = 0; j < testSuite3.length; ++j) {
        ArrayList<Integer> preorder = new ArrayList<Integer> (Arrays.asList (testSuite3[j]));
        NakedTree<Integer> tree = ProgrammingAssignment1.preorderToBST (preorder);
        checkBSTPreorder (preorder, tree, -1, Integer.MAX_VALUE);
        if (preorder.size () != 0)
          throw new TestException ("not enough nodes in the tree.");
      }
      return null;
    }

    // Run a test.
    static private void runTest (String name, Callable<Void> test) {
      StdOut.println ("TESTING " + name);
      try {
        test.call ();
        StdOut.println ("SUCCESS");
      }
      catch (TestException e) {
        StdOut.println ("TEST FAILED: " + e.getMessage ());
      }
      catch (Exception | Error e) {
        StdOut.print ("FATAL: ");
        e.printStackTrace ();
      }
    }

    static public void main(String[] args) {
      runTest ("EX 1.1", Test::testEx11);
      runTest ("EX 1.2", () -> { testEx1213 (false); return null; });
      runTest ("EX 1.3", () -> { testEx1213 (true); return null; });
      runTest ("EX 1 (RANDOM) ", Test::testEx1Rand);
      runTest ("EX 2 (RANDOM)", Test::testEx2);
      runTest ("EX 3", Test::testEx3);
    }

    ///////////////////////// What follows are test databases on ints.

    // Test suite for Ex. 1.2, 1.3
    // Format: +X: insert X, -X: delete X, the second to last element is the
    // expected tree, the last one the expected size.
    static String[][] testSuite1 =
    {{"+4", "+6", "+7", "+9", "+13", "+15", "+16", "+8", "-9",
      "9 -- {6 -- {4, 7 8}, 15 -- {13, 16}}", "8",
      "8 -- {6 -- {4, 7}, 15 -- {13, 16}}", "7"},
     {"-10", "-12", "-1", "+13", "-15", "+26", "-22", "+15", "+18", "+11", "+7", "-22", "-27", "+28", "+23", "+20", "+5", "+19", "-13", "+14", "-26", "+19", "+27", "-8", "+6", "-29", "-10", "+13", "-18", "-10", "-18", "+10", "-8", "+26", "-27", "-6", "+11", "+18", "-26", "+19", "-23", "-20", "+24", "+5", "+20", "+20", "+21", "-3", "+24", "+25", 
      "15 23 -- {6 11 -- {5, 7 10, 13 14}, 20 -- {18 19, 21}, 26 -- {24 25, 27 28}}", "18",
      "11 18 -- {7 -- {5, 10}, 14 -- {13, 15}, 20 24 -- {19, 21, 25 28}}", "14"},
     {"-14", "-1", "-8", "+2", "-19", "+3", "-22", "-12", "+24", "-11", "-28", "+3", "+2", "-13", "+22", "-3", "-20", "-16", "+23", "-14", "+14", "-22", "+18", "+14", "+20", "+24", "-14", "+28", "+12", "+26", "+6", "-7", "-24", "-26", "+8", "+4", "+17", "+26", "+6", "-11", "+16", "-9", "+17", "+4", "-14", "-14", "+16", "+29", "+25", "-20", 
      "6 18 -- {3 -- {2, 4}, 12 16 -- {8, 14, 17}, 23 26 -- {20 22, 24 25, 28 29}}", "18",
      "18 -- {4 12 -- {2, 6 8, 16 17}, 25 28 -- {23, 26, 29}}", "13"},
     {"-8", "-16", "-5", "+12", "+1", "+24", "+8", "+24", "-29", "-3", "-23", "-14", "+3", "+1", "-6", "+24", "+27", "+24", "+24", "+1", "+2", "-1", "+11", "-8", "+12", "+23", "-14", "+10", "+26", "-28", "-6", "+2", "+9", "-9", "+24", "-22", "+14", "+4", "-14", "+10", "+4", "-27", "-16", "+1", "+18", "-4", "+3", "+8", "+25", "-17", 
      "12 -- {8 -- {3 -- {1 2, 4}, 10 -- {9, 11}}, 24 -- {18 -- {14, 23}, 26 -- {25, 27}}}", "16",
      "10 -- {2 -- {1, 3 8}, 12 24 -- {11, 18 23, 25 26}}", "12"},
     {"+2", "+28", "+1", "-1", "+25", "-25", "+9", "-22", "-2", "-8", "+2", "+14", "-11", "+14", "-22", "-20", "-3", "-10", "-8", "+6", "-6", "+21", "-23", "+20", "-29", "-16", "-22", "-18", "-1", "-18", "+1", "-14", "-6", "+10", "+16", "+11", "+26", "+7", "+27", "+15", "-28", "+26", "+8", "-3", "-16", "+4", "-17", "+12", "+5", "-18", 
      "9 -- {5 -- {2 -- {1, 4}, 7 -- {6, 8}}, 20 -- {11 14 -- {10, 12, 15 16}, 25 27 -- {21, 26, 28}}}", "20",
      "7 20 -- {2 -- {1, 4 5}, 9 11 -- {8, 10, 12 15}, 26 -- {21, 27}}", "15"},
     {"-15", "-15", "+2", "+13", "+5", "-16", "+14", "+4", "-3", "-14", "+15", "+6", "+12", "+12", "-26", "-3", "+20", "-27", "-14", "-18", "+5", "-9", "-10", "+14", "+2", "+16", "-3", "-26", "+15", "+1", "-11", "-26", "+18", "-4", "+1", "-13", "-26", "+12", "+7", "-2", "-19", "-3", "+13", "+21", "+15", "+3", "-7", "-20", "-21", "-7", 
      "12 16 -- {2 5 -- {1, 3 4, 6 7}, 14 -- {13, 15}, 20 -- {18, 21}}", "15",
      "6 -- {3 -- {1, 5}, 13 15 -- {12, 14, 16 18}}", "10"},
     {"-6", "+1", "+2", "-12", "+19", "-2", "-2", "+26", "-8", "+12", "+23", "-4", "-26", "-12", "+1", "+8", "+3", "-8", "+6", "+11", "-29", "+26", "-4", "+12", "+1", "+1", "-1", "+15", "-16", "+2", "+19", "+29", "-4", "-21", "+8", "-6", "+1", "-18", "+22", "-21", "+25", "-8", "+18", "+14", "+7", "-24", "-25", "+29", "-27", "+6", 
      "8 19 -- {2 6 -- {1, 3, 7}, 12 15 -- {11, 14, 18}, 23 26 -- {22, 25, 29}}", "17",
      "11 22 -- {2 6 -- {1, 3, 7}, 15 -- {12 14, 18 19}, 26 -- {23, 29}}", "15"},
     {"-2", "-19", "-16", "+22", "+1", "+22", "+8", "-23", "-19", "+21", "+28", "+6", "+1", "-24", "-7", "-7", "-21", "-9", "-3", "+5", "+24", "-10", "-21", "-5", "+29", "-1", "+6", "+1", "-15", "-19", "+14", "-10", "+12", "-26", "+14", "+11", "+28", "+10", "+19", "+1", "+18", "+9", "-27", "-25", "+19", "+25", "-5", "+20", "+10", "-25", 
      "14 -- {8 -- {5 -- {1, 6}, 11 -- {9 10, 12}}, 22 -- {19 -- {18, 20 21}, 28 -- {24 25, 29}}}", "18",
      "12 22 -- {8 10 -- {1 6, 9, 11}, 18 -- {14, 19 20}, 28 -- {24, 29}}", "15"},
     {"-20", "+29", "-5", "+28", "-17", "-1", "-8", "-14", "+8", "-13", "-11", "-2", "+23", "-28", "-1", "+5", "+26", "+11", "-10", "+10", "+23", "-24", "+11", "-10", "+4", "+26", "-26", "-15", "-26", "+18", "+21", "-15", "-6", "+22", "-14", "-19", "-20", "+8", "+28", "-28", "-12", "-7", "+14", "+14", "-12", "+9", "-6", "+10", "-26", "-8", 
      "11 23 -- {8 -- {4 5, 9 10}, 21 -- {14 18, 22}, 28 -- {26, 29}}", "14",
      "18 -- {5 11 -- {4, 9 10, 14}, 22 -- {21, 23 29}}", "11"},
     {"+11", "+28", "-3", "-3", "-7", "+20", "-1", "+13", "+23", "+29", "+9", "-14", "-22", "+23", "+20", "-19", "+18", "-21", "+10", "-23", "-4", "+12", "-19", "+11", "-4", "-26", "-9", "-8", "-10", "+2", "-12", "-22", "-8", "-16", "+17", "+4", "-3", "-1", "-9", "+4", "-11", "+3", "+1", "+20", "+7", "+1", "-2", "+18", "+17", "+23", 
      "11 20 -- {3 9 -- {1 2, 4 7, 10}, 13 -- {12, 17 18}, 28 -- {23, 29}}", "16",
      "18 -- {3 13 -- {1, 4 7, 17}, 28 -- {20 23, 29}}", "11"},
     {"+21", "-6", "-10", "-26", "-21", "-24", "-19", "-3", "+9", "-1", "+18", "-1", "-23", "-22", "+5", "-28", "+6", "-8", "-1", "-1", "+29", "-3", "-16", "+21", "+26", "-19", "-17", "-21", "+6", "-13", "+2", "-26", "+10", "-2", "+1", "+10", "+24", "-20", "-23", "-29", "+28", "-17", "-16", "-27", "+10", "-20", "+21", "+15", "-22", "-13", 
      "6 18 -- {2 -- {1, 5}, 10 -- {9, 15}, 26 -- {21 24, 28 29}}", "13",
      "10 -- {6 -- {1 5, 9}, 18 24 -- {15, 21, 28}}", "10"},
     {"+26", "-22", "-19", "+7", "+17", "-19", "-18", "+1", "-15", "+15", "-7", "-27", "-3", "+21", "-28", "-1", "+15", "+4", "+5", "+11", "+22", "+14", "+28", "-19", "-27", "-27", "-7", "-15", "-20", "-9", "+14", "-5", "-1", "-9", "+8", "+7", "+24", "-1", "-19", "-1", "-18", "-14", "-10", "+1", "-21", "-21", "+28", "+20", "-6", "-1", 
      "7 17 -- {4 -- {1, 5}, 14 -- {8 11, 15}, 22 26 -- {20 21, 24, 28}}", "15",
      "22 -- {7 11 -- {4, 8, 17 20}, 26 -- {24, 28}}", "10"},
     {"+24", "-24", "-15", "-26", "+28", "-28", "-2", "-15", "-28", "-1", "+22", "+7", "-20", "+23", "-4", "+16", "+29", "+29", "-10", "-14", "-17", "-7", "+1", "-6", "-15", "-1", "+17", "-8", "+6", "-8", "+20", "+9", "+29", "+13", "+20", "+1", "+6", "+12", "+28", "-28", "+29", "-24", "-1", "-7", "+12", "-13", "-16", "-25", "-15", "-11", 
      "13 22 -- {7 -- {1 6, 9 12}, 17 -- {16, 20}, 24 -- {23, 28 29}}", "14",
      "17 -- {9 -- {6, 12}, 22 -- {20, 23 29}}", "8"},
     {"+21", "+29", "+29", "+3", "-5", "-29", "+29", "-23", "-19", "-28", "+19", "-11", "-2", "+1", "-1", "+17", "-2", "-7", "-7", "-5", "+9", "+4", "-16", "+19", "+23", "+10", "+4", "-14", "+1", "+13", "-29", "-25", "+13", "-9", "+27", "-24", "-11", "-29", "-1", "+19", "+26", "-11", "+27", "-8", "-25", "+4", "-2", "+13", "+13", "+24", 
      "17 24 -- {3 9 -- {1, 4, 10 13}, 21 -- {19, 23}, 27 -- {26, 29}}", "14",
      "21 -- {10 17 -- {3 4, 13, 19}, 26 -- {23 24, 27}}", "11"},
     {"+12", "-26", "+25", "+29", "+6", "-13", "-1", "+1", "-12", "+13", "+20", "+16", "-14", "-5", "+24", "+5", "-20", "-20", "+13", "-8", "+21", "-26", "+26", "-22", "-1", "-2", "+12", "-19", "+14", "+9", "-29", "-23", "+19", "+23", "-14", "-12", "+17", "+15", "-11", "-3", "-11", "-7", "+5", "-13", "-26", "+29", "+14", "-5", "-15", "-5", 
      "13 20 -- {6 -- {1 5, 9 12}, 16 -- {14 15, 17 19}, 23 25 -- {21, 24, 26 29}}", "18",
      "21 -- {9 16 -- {6, 14, 17 19}, 24 -- {23, 25 29}}", "11"},
     {"+11", "-8", "-9", "-20", "-14", "+21", "+2", "-25", "-23", "+21", "-16", "+22", "+3", "+13", "-1", "+24", "-7", "-19", "+25", "+20", "-11", "+6", "-20", "+13", "-22", "+24", "+6", "+15", "+1", "+4", "-3", "-3", "+2", "-16", "-3", "-9", "+14", "-21", "-26", "+22", "+7", "+27", "-11", "-19", "-4", "+7", "-17", "-28", "+24", "+8", 
      "11 21 -- {3 6 -- {1 2, 4, 7 8}, 15 -- {13 14, 20}, 24 -- {22, 25 27}}", "17",
      "13 -- {6 -- {1 2, 7 8}, 15 24 -- {14, 22, 25 27}}", "12"},
     {"-17", "+15", "+12", "+16", "+28", "-4", "+21", "+17", "+19", "+5", "-25", "-8", "-11", "+24", "-28", "-7", "+3", "+11", "+8", "-1", "+14", "-10", "+1", "+9", "+8", "+16", "+27", "+2", "+23", "-5", "+6", "+14", "+7", "+11", "+8", "-14", "+12", "-15", "+2", "+14", "-27", "+11", "+18", "-7", "-3", "-6", "-16", "-3", "-15", "+24", 
      "11 -- {5 -- {2 -- {1, 3}, 8 -- {6 7, 9}}, 17 -- {15 -- {12 14, 16}, 21 27 -- {18 19, 23 24, 28}}}", "21",
      "11 19 -- {2 -- {1, 8 9}, 17 -- {12 14, 18}, 23 -- {21, 24}}", "13"},
     {"-14", "+26", "-2", "+15", "+29", "-19", "+17", "-18", "-9", "-12", "+10", "+20", "-12", "-4", "+2", "+19", "+26", "+9", "-23", "-16", "-9", "-25", "+1", "-26", "+28", "-9", "-15", "+3", "+7", "-19", "-17", "+7", "+20", "-26", "+13", "-24", "-2", "-14", "+5", "-29", "-3", "-13", "-22", "+3", "+4", "-28", "-12", "+25", "+24", "-22", 
      "9 19 -- {2 5 -- {1, 3 4, 7}, 15 -- {10 13, 17}, 24 26 -- {20, 25, 28 29}}", "18",
      "5 -- {3 -- {1, 4}, 10 24 -- {7, 20, 25}}", "9"},
     {"-18", "+17", "-29", "+1", "-29", "+26", "+4", "+18", "-1", "-6", "+27", "+10", "+2", "-27", "+27", "+22", "+20", "+15", "-7", "-10", "+9", "-22", "+18", "-5", "+1", "-18", "-9", "-21", "+21", "+26", "-3", "-23", "-7", "+5", "+8", "-7", "+10", "+6", "-26", "-5", "-27", "-12", "+16", "+23", "-4", "-1", "-16", "+25", "-27", "+24", 
      "17 -- {8 -- {4 -- {1 2, 5 6}, 10 -- {9, 15 16}}, 22 -- {20 -- {18, 21}, 24 26 -- {23, 25, 27}}}", "20",
      "15 -- {8 -- {2 6, 10}, 20 23 -- {17, 21, 24 25}}", "11"},
     {"+28", "-29", "+2", "-4", "-5", "-23", "-6", "+1", "+27", "-9", "-27", "-1", "+23", "-2", "-7", "+13", "+26", "+6", "+1", "-11", "-19", "+5", "-25", "+25", "+28", "+24", "+23", "-27", "-22", "-5", "-26", "-1", "+28", "-9", "-7", "+25", "+28", "-15", "+9", "+3", "+14", "+2", "+8", "+7", "-18", "+29", "+3", "+3", "+11", "+23", 
      "6 23 -- {2 -- {1, 3 5}, 8 13 -- {7, 9 11, 14}, 25 27 -- {24, 26, 28 29}}", "18",
      "7 23 -- {3 -- {2, 6}, 9 13 -- {8, 11, 14}, 25 -- {24, 28 29}}", "14"},
     {"+22", "-26", "-21", "-2", "-18", "+3", "-9", "+19", "-18", "-26", "+7", "-14", "+16", "-17", "-21", "-25", "-23", "-28", "+17", "-29", "+20", "+16", "+24", "+23", "-26", "+8", "-20", "-22", "-1", "+20", "-5", "+14", "+26", "+8", "+13", "+22", "+25", "-9", "+1", "-4", "+13", "+25", "-28", "-15", "+28", "+11", "-10", "-18", "-17", "+6", 
      "19 -- {13 -- {3 7 -- {1, 6, 8 11}, 16 -- {14, 17}}, 24 -- {22 -- {20, 23}, 26 -- {25, 28}}}", "18",
      "13 23 -- {3 7 -- {1, 6, 8 11}, 16 20 -- {14, 19, 22}, 25 -- {24, 26 28}}", "17"},
     {"+22", "+10", "+24", "-8", "+22", "-23", "+15", "+23", "+4", "-19", "-14", "+21", "+28", "+13", "+29", "+10", "+8", "-17", "-18", "-13", "+5", "-25", "+1", "+2", "+18", "+4", "+17", "+24", "+2", "-11", "-1", "+7", "-29", "-12", "-29", "+14", "-17", "+9", "-1", "-17", "+22", "-5", "-23", "+23", "-12", "-21", "-15", "+7", "+5", "-25", 
      "10 -- {5 -- {2 -- {1, 4}, 8 -- {7, 9}}, 22 -- {15 18 -- {13 14, 17, 21}, 24 -- {23, 28 29}}}", "19",
      "8 18 -- {4 -- {2, 5 7}, 10 -- {9, 14}, 23 -- {22, 24 28}}", "13"},
     {"+1", "-9", "+8", "-6", "-21", "+18", "+15", "-16", "-10", "+1", "-28", "+28", "+25", "+17", "+2", "+23", "+25", "+27", "-28", "-17", "+9", "-18", "-19", "+5", "+26", "+24", "-26", "-7", "+15", "-19", "+10", "+16", "-28", "-22", "+28", "+19", "-27", "+7", "-1", "+7", "+27", "-28", "-17", "+3", "-16", "-24", "+2", "-1", "-6", "+26", 
      "18 -- {8 -- {2 5 -- {1, 3, 7}, 15 -- {9 10, 16 17}}, 25 -- {23 -- {19, 24}, 27 -- {26, 28}}}", "19",
      "8 19 -- {3 -- {2, 5 7}, 10 -- {9, 15}, 25 -- {23, 26 27}}", "13"},
     {"-9", "+26", "-19", "-11", "-28", "+1", "+29", "+1", "+2", "+7", "-5", "+29", "-27", "-25", "+21", "-26", "-14", "+24", "+1", "+24", "-9", "+13", "+19", "-16", "-18", "+27", "-4", "+28", "-18", "-27", "-15", "-16", "+22", "+22", "-18", "-24", "-11", "+20", "-5", "-12", "-18", "-5", "-17", "-15", "-15", "+2", "+20", "-6", "-18", "+24", 
      "21 -- {2 13 -- {1, 7, 19 20}, 26 28 -- {22 24, 27, 29}}", "13",
      "21 -- {2 19 -- {1, 7 13, 20}, 28 -- {22 24, 29}}", "11"},
     {"-27", "+8", "-5", "+1", "-2", "+27", "+17", "-23", "-27", "+8", "+22", "+12", "-20", "+1", "+16", "+7", "-17", "+20", "+1", "-2", "-4", "+16", "-22", "+29", "+9", "-13", "+1", "+29", "-27", "-20", "+1", "-2", "+20", "+26", "+10", "+26", "-18", "-15", "+13", "+22", "+27", "+25", "+17", "-27", "+19", "+12", "+24", "-26", "-14", "+16", 
      "16 22 -- {8 10 -- {1 7, 9, 12 13}, 19 -- {17, 20}, 25 27 -- {24, 26, 29}}", "17",
      "10 22 -- {8 -- {1 7, 9}, 16 19 -- {12 13, 17, 20}, 25 -- {24, 29}}", "15"},
     {"+23", "-28", "+21", "-1", "-2", "+6", "-1", "-8", "+7", "-21", "-26", "+1", "+7", "+25", "-5", "-10", "+12", "+24", "-7", "+7", "-6", "-13", "+22", "-7", "-26", "-16", "-1", "+8", "-7", "-1", "+9", "+1", "-10", "-9", "-18", "+10", "-1", "-7", "-13", "-21", "-10", "-6", "-2", "-22", "+1", "+3", "+24", "+1", "-13", "-28", 
      "8 21 -- {6 -- {1 3, 7}, 10 -- {9, 12}, 24 -- {22 23, 25}}", "13",
      "12 -- {3 -- {1, 8}, 24 -- {23, 25}}", "7"},
     {"-3", "-19", "+24", "-13", "-4", "+4", "+25", "+1", "+24", "-14", "+20", "-28", "-28", "-28", "+15", "-13", "+4", "+10", "-23", "-10", "+15", "+29", "-24", "-5", "-19", "+11", "-7", "-25", "-2", "+27", "+15", "-21", "+6", "-2", "+13", "+10", "+18", "-4", "-18", "-3", "-1", "-14", "+23", "-24", "-23", "-14", "+3", "-29", "+20", "-5", 
      "15 24 -- {4 10 -- {1 3, 6, 11 13}, 20 -- {18, 23}, 27 -- {25, 29}}", "15",
      "10 15 -- {3 6, 11 13, 20 27}", "8"},
     {"+19", "-27", "-13", "-28", "-27", "-10", "-3", "+18", "+8", "-5", "-10", "-4", "+15", "+3", "+2", "-23", "+13", "-24", "+5", "+4", "-28", "+15", "+12", "+12", "+23", "+6", "+8", "+6", "+15", "-8", "-15", "+15", "-25", "-16", "-7", "+8", "-11", "-17", "-1", "+12", "-1", "-15", "-10", "+22", "+21", "+25", "-12", "-4", "+27", "-29", 
      "8 18 -- {3 5 -- {2, 4, 6}, 13 -- {12, 15}, 22 25 -- {19 21, 23, 27}}", "16",
      "19 -- {3 8 -- {2, 5 6, 13 18}, 22 25 -- {21, 23, 27}}", "13"},
     {"-29", "-10", "-1", "+8", "+28", "-12", "-29", "-29", "-20", "+17", "+7", "+12", "-13", "+22", "+6", "+10", "-9", "+17", "+5", "+1", "-16", "-7", "-5", "-20", "+1", "+1", "+13", "+10", "-21", "+24", "+10", "+11", "-27", "-16", "+28", "-22", "-17", "+17", "-16", "+14", "-19", "+18", "-26", "+10", "-9", "-1", "+24", "-25", "+7", "+16", 
      "8 17 -- {6 -- {1 5, 7}, 12 14 -- {10 11, 13, 16}, 24 -- {18 22, 28}}", "16",
      "12 -- {7 10 -- {6, 8, 11}, 14 18 -- {13, 16 17, 24 28}}", "13"},
     {"-1", "+9", "-4", "-5", "-6", "-4", "-1", "+23", "+22", "+6", "+28", "-23", "+6", "-5", "+9", "-4", "+13", "+25", "+1", "+7", "-2", "+23", "+2", "+13", "+10", "+4", "-27", "-15", "-16", "-11", "-8", "+3", "+1", "-19", "-9", "+3", "+25", "-4", "+14", "+7", "-1", "-1", "-8", "-21", "+23", "-10", "-18", "+13", "+16", "-4", 
      "6 22 -- {2 -- {1, 3 4}, 9 13 -- {7, 10, 14 16}, 25 -- {23, 28}}", "15",
      "22 -- {6 13 -- {2 3, 7, 14 16}, 25 -- {23, 28}}", "11"},
     {"-6", "+3", "+8", "+23", "+13", "+9", "+29", "-3", "-11", "+18", "+25", "-5", "-5", "-21", "+15", "-2", "+4", "+23", "+20", "-23", "-15", "+11", "-23", "+24", "-16", "+27", "+19", "-26", "-29", "+21", "+6", "-3", "-1", "+9", "-19", "-10", "-22", "-22", "-24", "-28", "+1", "-26", "-12", "-12", "-22", "-7", "-17", "-14", "+29", "-3", 
      "13 23 -- {4 8 -- {1 3, 6, 9 11}, 18 20 -- {15, 19, 21}, 25 -- {24, 27 29}}", "18",
      "13 -- {6 9 -- {1 4, 8, 11}, 20 25 -- {18, 21, 27 29}}", "13"}};
    
    // Test suite for Ex3, these are preorder traversals of BSTs.
    static Integer[][] testSuite3 = {
      {154, 81, 17, 16, 9, 7, 13, 56, 34, 27, 26, 52, 48, 54, 69, 75, 90, 93, 136, 98, 95, 109, 108, 105, 122, 112, 111, 117, 123, 135, 127, 132, 151, 141, 140, 255, 236, 158, 183, 179, 178, 164, 165, 225, 211, 209, 200, 232, 244, 241, 237, 245, 254, 268, 257, 271, 270, 283, 293, 297, 296},
      {64, 60, 29, 23, 0, 11, 26, 38, 30, 41, 50, 43, 62, 61, 253, 68, 66, 229, 106, 103, 75, 90, 86, 99, 127, 123, 112, 126, 185, 150, 176, 152, 153, 164, 220, 223, 256, 293, 265},
      {137, 26, 23, 19, 4, 8, 9, 14, 102, 79, 58, 29, 27, 54, 42, 36, 34, 44, 43, 52, 51, 65, 63, 75, 74, 99, 85, 90, 87, 96, 101, 135, 113, 286, 177, 155, 139, 141, 166, 175, 255, 208, 187, 185, 205, 199, 222, 214, 227, 231, 229, 237, 236, 245, 241, 268, 274, 296, 292, 295, 298},
      {40},
      {242, 146, 78, 55, 28, 6, 1, 16, 46, 74, 61, 73, 96, 84, 80, 97, 134, 208, 159, 178, 205, 191, 202, 204, 209, 277, 250},
      {295, 209, 161, 100, 33, 6, 1, 21, 34, 64, 47, 37, 36, 62, 61, 48, 71, 66, 86, 106, 124, 144, 168, 162, 164, 185, 184, 186, 197, 195, 241, 229, 225, 228, 230, 260, 259, 254, 274, 265, 270, 282, 290, 296},
      {201, 123, 97, 85, 59, 39, 37, 5, 50, 95, 98, 170, 142, 182, 191, 253, 221, 220, 227, 299, 298},
      {277, 129, 77, 20, 6, 8, 14, 50, 21, 33, 28, 24, 25, 32, 49, 44, 39, 72, 53, 51, 60, 76, 75, 118, 84, 99, 95, 102, 108, 136, 267, 164, 148, 143, 137, 142, 154, 163, 202, 185, 171, 183, 176, 180, 189, 197, 195, 200, 259, 251, 206, 265, 271, 279, 278, 293, 286},
      {227, 115, 57, 52, 13, 2, 1, 9, 30, 21, 14, 56, 59, 85, 75, 64, 70, 105, 86, 110, 194, 188, 148, 135, 123, 141, 143, 179, 168, 214, 209, 207, 226, 216, 295, 268, 236, 234, 257, 248, 237, 262, 294},
      {35, 18, 3, 14, 6, 15, 26, 30, 203, 99, 73, 39, 42, 62, 89, 153, 152, 106, 198, 170, 159, 179, 284, 209, 278, 230, 234, 269, 291, 290, 296},
      {141, 57, 15, 13, 5, 26, 21, 19, 43, 42, 30, 41, 34, 49, 113, 94, 67, 61, 58, 64, 63, 66, 82, 81, 68, 74, 72, 88, 91, 103, 105, 123, 122, 129, 130, 140, 278, 244, 176, 166, 161, 144, 150, 154, 173, 227, 178, 214, 185, 182, 180, 196, 192, 198, 206, 217, 222, 225, 230, 235, 238, 247, 246, 270, 262, 257, 256, 268, 271, 272, 283, 279, 282, 294, 289, 291, 299},
      {37},
      {4, 3, 1, 258, 10, 124, 14, 12, 64, 34, 19, 17, 22, 29, 54, 39, 37, 36, 46, 43, 52, 48, 56, 63, 88, 69, 65, 86, 70, 81, 74, 118, 220, 129, 127, 125, 167, 139, 133, 130, 131, 138, 151, 143, 142, 150, 156, 153, 163, 188, 184, 182, 216, 200, 189, 206, 201, 211, 239, 228, 251, 246, 254, 252, 274, 279, 277, 275, 285, 296, 292, 289, 287, 291},
      {134, 8, 7, 128, 51, 16, 15, 9, 34, 33, 20, 29, 37, 43, 41, 47, 113, 77, 73, 56, 67, 108, 95, 81, 79, 87, 93, 119, 121, 120, 125, 263, 170, 155, 153, 152, 163, 258, 214, 204, 186, 178, 184, 187, 195, 190, 199, 209, 205, 240, 224, 223, 231, 228, 237, 233, 235, 242, 241, 255, 246, 247, 249, 259, 262, 290, 283, 265, 280, 267, 266, 279, 273, 268, 287, 296, 292},
      {291, 129, 106, 52, 39, 11, 33, 44, 76, 98, 237, 203, 133, 139, 174, 162, 198, 181, 229, 210, 218, 233, 254},
      {200, 51, 48, 25, 18, 9, 40, 32, 36, 34, 49, 181, 52, 164, 108, 92, 81, 61, 55, 80, 65, 78, 77, 67, 69, 84, 93, 103, 105, 120, 116, 113, 110, 115, 119, 146, 135, 122, 127, 172, 165, 179, 177, 180, 194, 182, 184, 191, 190, 187, 241, 223, 222, 201, 203, 210, 211, 229, 224, 234, 232, 288, 243, 242, 278, 246, 259, 276, 264, 279, 289, 296},
      {280, 169, 109, 6, 4, 0, 54, 62, 76, 74, 78, 131, 141, 168, 246, 282},
      {33, 17, 8, 24, 225, 142, 74, 45, 36, 41, 60, 54, 53, 67, 100, 81, 77, 75, 80, 78, 99, 86, 103, 102, 125, 124, 115, 106, 114, 109, 117, 129, 126, 133, 207, 161, 150, 144, 172, 171, 201, 187, 175, 197, 192, 200, 205, 213, 208, 209, 277, 257, 227, 251, 245, 239, 249, 256, 252, 262, 273, 289, 285, 291, 290, 292, 294},
      {27, 13, 92, 31, 84, 165, 131, 127, 100, 158, 134, 265, 193},
      {233, 209, 74, 4, 9, 36, 10, 57, 52, 49, 46, 70, 64, 69, 89, 83, 76, 75, 87, 186, 175, 155, 125, 95, 90, 112, 142, 154, 152, 171, 174, 176, 178, 187, 204, 189, 208, 213, 222, 294, 267, 238, 235, 254, 264, 257, 279, 272, 285, 284, 288, 299, 297},
      {291, 66, 17, 1, 3, 29, 39, 38, 63, 219, 95, 85, 69, 78, 94, 132, 104, 131, 122, 130, 137, 134, 188, 174, 155, 158, 211, 189, 267, 221, 240, 241, 290, 297},
      {208, 154, 3, 48, 37, 77, 65, 72, 66, 110, 97, 119, 147, 159, 175, 220, 228, 251, 249, 261},
      {98, 89, 23, 12, 17, 78, 64, 44, 236, 205, 174, 115, 166, 153, 181, 175, 176, 186, 190, 219, 217, 229, 221, 288, 278, 245},
      {213, 206, 191, 64, 100, 200, 261},
      {288, 141, 85, 182, 230},
      {286, 285, 214, 94, 64, 33, 4, 16, 11, 29, 31, 59, 53, 41, 89, 82, 66, 167, 96, 158, 132, 112, 103, 99, 111, 126, 114, 131, 138, 137, 151, 166, 172, 202, 189, 180, 178, 183, 181, 199, 196, 207, 212, 213, 262, 235, 249, 267, 270, 277, 289},
      {3, 0, 1, 172, 100, 45, 32, 28, 24, 36, 94, 57, 91, 80, 58, 130, 104, 124, 116, 106, 126, 131, 146, 144, 137, 136, 139, 169, 164, 170, 208, 174, 173, 186, 193, 197, 295, 280, 270, 259, 250, 217, 245, 230, 256, 253, 274, 272, 283, 281},
      {62, 25, 10, 40, 282, 209, 69, 143, 131, 145, 174, 181, 205, 264, 222, 261, 289},
      {21, 9, 3, 195, 59, 51, 94, 219, 206, 260, 253},
      {71, 50, 38, 13, 8, 37, 47, 62, 53, 69, 70, 110, 78, 92, 89, 105, 157, 130, 117, 124, 133, 139, 213, 172, 165, 159, 161, 177, 180, 194, 189, 181, 197, 210, 198, 291, 276, 258, 243, 232, 220, 214, 223, 257, 268, 266, 295, 292}};
}
